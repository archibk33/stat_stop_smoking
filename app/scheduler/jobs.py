from __future__ import annotations

from datetime import date
from zoneinfo import ZoneInfo

import structlog
from aiogram import Bot
from aiogram.types import ChatMemberAdministrator, ChatMemberOwner, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler


from app.config import Settings
from app.db.repo import MetricsRepo, UserRepo, TopPostRepo
from app.db.models import Metrics
from app.db.session import AsyncSession, async_sessionmaker
from app.domain.services import calculate_metrics, generate_admin_title


async def daily_post_top(bot: Bot, session_factory: async_sessionmaker[AsyncSession], settings: Settings) -> None:
    async with session_factory() as session:
        repo = MetricsRepo(session)
        top = await repo.get_top(limit=10)

    if not top:
        return

    lines = []
    medals = ["ü•á", "ü•à", "ü•â"]
    for idx, (user, metrics) in enumerate(top, start=1):
        prefix = medals[idx - 1] if idx <= 3 else f"{idx}."
        name = user.full_name or user.username or str(user.user_id)
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        score = metrics.days - (metrics.relapses * 3)
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–∏–¥–∏–≤–∞—Ö –∏ —Ä–µ–π—Ç–∏–Ω–≥–µ
        relapse_text = f" (—Ä–µ—Ü–∏–¥–∏–≤–æ–≤: {metrics.relapses}, —Ä–µ–π—Ç–∏–Ω–≥: {score})" if metrics.relapses > 0 else f" (—Ä–µ–π—Ç–∏–Ω–≥: {score})"
        lines.append(f"{prefix} {name} ‚Äî {metrics.days} –¥–Ω.{relapse_text}")

    text = "–¢–û–ü-10:\n" + "\n".join(lines)

    # –í –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –ø–æ—Å—Ç–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ - —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫
    kb = InlineKeyboardMarkup(inline_keyboard=[])

    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Å—Ç –¢–û–ü–∞, –µ—Å–ª–∏ –±—ã–ª
        top_repo = TopPostRepo(session)
        prev = await top_repo.get_for_chat(settings.group_chat_id, None)
        if prev is not None:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                me = await bot.get_me()
                member = await bot.get_chat_member(settings.group_chat_id, me.id)
                if getattr(member, "can_delete_messages", False) or member.status in ("creator", "administrator"):
                    await bot.delete_message(chat_id=settings.group_chat_id, message_id=prev.message_id)
                else:
                    structlog.get_logger().info("Skip delete: no rights in chat %s", settings.group_chat_id)
            except Exception as e:  # noqa: BLE001
                structlog.get_logger().warning("daily_top_prev_delete_failed", error=str(e))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
        sent = await bot.send_message(chat_id=settings.group_chat_id, text=text, reply_markup=kb)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ
        await top_repo.set(settings.group_chat_id, sent.message_id, None)
        await session.commit()
        
    except Exception as e:  # noqa: BLE001
        structlog.get_logger().warning("daily_top_post_failed", error=str(e))


async def daily_update(bot: Bot, session_factory: async_sessionmaker[AsyncSession], settings: Settings) -> None:
    log = structlog.get_logger()
    async with session_factory() as session:
        users = UserRepo(session)
        metrics_repo = MetricsRepo(session)
        members = await users.list_all_members()
        for user in members:
            m = calculate_metrics(user.quit_date, user.pack_price)
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ü–∏–¥–∏–≤–æ–≤
            current_metrics = await session.get(Metrics, user.user_id)
            if current_metrics and current_metrics.relapses > 0:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ü–∏–¥–∏–≤—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–Ω–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 3
                if current_metrics.relapses > 3:
                    m.days = 0
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–∏–¥–∏–≤–æ–≤
                await metrics_repo.upsert_metrics_with_relapses(user.user_id, m.days, m.saved_money, current_metrics.relapses)
            else:
                await metrics_repo.upsert_metrics(user.user_id, m.days, m.saved_money)
            try:
                if m.days > 0:
                    member = await bot.get_chat_member(settings.group_chat_id, user.user_id)
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ ‚Äî –µ–º—É –Ω–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º‚Äë—Ç–∞–π—Ç–ª –±–æ—Ç–æ–º
                    if isinstance(member, ChatMemberOwner):
                        continue
                    title = generate_admin_title(m.days)
                    await bot.set_chat_administrator_custom_title(
                        chat_id=settings.group_chat_id,
                        user_id=user.user_id,
                        custom_title=title,
                    )
            except Exception as e:  # noqa: BLE001
                log.warning("custom_title_update_failed", user_id=user.user_id, error=str(e))
        await session.commit()

    # –õ–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try:
        async with session_factory() as session:
            users = UserRepo(session)
            notify_users = await users.list_with_notifications()
            for u in notify_users:
                m = calculate_metrics(u.quit_date, u.pack_price)
                await bot.send_message(chat_id=u.user_id, text=f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à —Å—Ç–∞–∂: {m.days} –¥–Ω., —ç–∫–æ–Ω–æ–º–∏—è: {m.saved_money:.0f}‚ÇΩ")
    except Exception as e:  # noqa: BLE001
        log = structlog.get_logger()
        log.warning("notify_failed", error=str(e))

    log.info("daily_metrics_updated")


def setup_scheduler(settings: Settings, bot: Bot, session_factory: async_sessionmaker[AsyncSession]) -> AsyncIOScheduler:
    scheduler = AsyncIOScheduler(timezone=ZoneInfo(settings.tz))

    # –í–ù–ò–ú–ê–ù–ò–ï: —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ >= 3600 —Å–µ–∫—É–Ω–¥.
    # –û—Å—Ç–∞–≤–ª—è–µ–º 30 —Å–µ–∫ –ø–æ –∑–∞–¥–∞—á–µ.
    
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –¢–û–ü-10 –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    scheduler.add_job(
        func=daily_post_top,
        args=[bot, session_factory, settings],
        trigger="interval",
        seconds=30,
        id="test_top_post",
        replace_existing=True,
    )

    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    scheduler.add_job(
        func=daily_update,
        args=[bot, session_factory, settings],
        trigger="interval",
        seconds=30,
        id="test_metrics_update",
        replace_existing=True,
    )

    return scheduler
