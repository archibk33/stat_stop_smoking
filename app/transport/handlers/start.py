import asyncio
import aiohttp
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ChatMemberUpdated
from app.transport.handlers.menu_utils import update_message_with_menu
from app.db.session import async_sessionmaker, AsyncSession
import logging

logger = logging.getLogger(__name__)

router = Router()


def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats:open")],
            [InlineKeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="rating:menu")],
            [InlineKeyboardButton(text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –í–∫–ª/–í—ã–∫–ª", callback_data="notify:toggle")],
            [InlineKeyboardButton(text="üö¨ –í—ã–∫—É—Ä–∏–ª —Å–∏–≥–∞—Ä–µ—Ç—É", callback_data="add_relapse")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help:show")],
            [InlineKeyboardButton(text="üóëÔ∏è –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="reset:confirm")],
        ]
    )


def registration_menu_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="reg:start")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help:show")],
        ]
    )


@router.message(CommandStart())
async def on_start(message: Message, session_factory: async_sessionmaker[AsyncSession]) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != "private":
        return
        
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    async with session_factory() as session:
        from app.db.repo import UserRepo
        users = UserRepo(session)
        user = await users.get_by_id(user_id)
        
        if user and user.quit_date:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.", 
                               reply_markup=registration_menu_kb())


@router.message(Command("menu"))
async def show_menu_command(message: Message, session_factory: async_sessionmaker[AsyncSession]) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != "private":
        return
        
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    async with session_factory() as session:
        from app.db.repo import UserRepo
        users = UserRepo(session)
        user = await users.get_by_id(user_id)
        
        if user and user.quit_date:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.", 
                               reply_markup=registration_menu_kb())


@router.message(Command("help"))
async def show_help(message: Message, session_factory: async_sessionmaker[AsyncSession]) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type != "private":
        return
        
    help_text = """
ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É "–ü—É—Ç—å –°–≤–æ–±–æ–¥–Ω–æ–≥–æ"**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:**
‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ üèÜ –†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
‚Ä¢ üö¨ –û—Ç–º–µ—Ç–∫–∞ –æ –≤—ã–∫—É—Ä–µ–Ω–Ω–æ–π —Å–∏–≥–∞—Ä–µ—Ç–µ
‚Ä¢ üóëÔ∏è –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –æ–¥–∏–Ω —Ä–∞–∑, —É–∫–∞–∑–∞–≤ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–≥–∞—Ä–µ—Ç—ã
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üö¨ –í—ã–∫—É—Ä–∏–ª —Å–∏–≥–∞—Ä–µ—Ç—É" –ø—Ä–∏ —Ä–µ—Ü–∏–¥–∏–≤–µ
3. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
4. –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
5. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ

**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑. –ü—Ä–∏ —Ä–µ—Ü–∏–¥–∏–≤–∞—Ö —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –¥–æ 3-–≥–æ —Ä–µ—Ü–∏–¥–∏–≤–∞. –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.
"""
    
    await message.answer(help_text, parse_mode="Markdown")


@router.message(~F.text.regexp(r"^\d{4}-\d{2}-\d{2}$") & ~F.text.regexp(r"^\d+(?:[\.,]\d+)?$"))
async def handle_any_message(message: Message, session_factory: async_sessionmaker[AsyncSession]) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö, –∫—Ä–æ–º–µ –¥–∞—Ç –∏ —Ü–µ–Ω
    
    –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ü–û–°–õ–ï —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    (registration.py), —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞—Ç–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏.
    
    –§–∏–ª—å—Ç—Ä—ã –∏—Å–∫–ª—é—á–∞—é—Ç:
    - –î–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-01-01)
    - –¶–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞ —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250, 250.50)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç)
    if message.chat.type != "private":
        return
    
    user_id = message.from_user.id
    logger.info(f"handle_any_message: processing message '{message.text}' from user {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    async with session_factory() as session:
        from app.db.repo import UserRepo
        users = UserRepo(session)
        user = await users.get_by_id(user_id)
        
        if user and user.quit_date:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.", 
                               reply_markup=registration_menu_kb())


@router.callback_query(F.data == "help:show")
async def show_help_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    await callback.answer()
    
    help_text = """
ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É "–ü—É—Ç—å –°–≤–æ–±–æ–¥–Ω–æ–≥–æ"**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:**
‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ üèÜ –†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
‚Ä¢ üö¨ –û—Ç–º–µ—Ç–∫–∞ –æ –≤—ã–∫—É—Ä–µ–Ω–Ω–æ–π —Å–∏–≥–∞—Ä–µ—Ç–µ
‚Ä¢ üóëÔ∏è –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –æ–¥–∏–Ω —Ä–∞–∑, —É–∫–∞–∑–∞–≤ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–≥–∞—Ä–µ—Ç—ã
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üö¨ –í—ã–∫—É—Ä–∏–ª —Å–∏–≥–∞—Ä–µ—Ç—É" –ø—Ä–∏ —Ä–µ—Ü–∏–¥–∏–≤–µ
3. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
4. –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
5. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ

**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑. –ü—Ä–∏ —Ä–µ—Ü–∏–¥–∏–≤–∞—Ö —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –¥–æ 3-–≥–æ —Ä–µ—Ü–∏–¥–∏–≤–∞. –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")],
        ]
    )
    
    await update_message_with_menu(callback, help_text, kb, add_main_menu=False)


@router.callback_query(F.data == "menu:main")
async def return_to_main_menu(callback: CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update_message_with_menu(callback, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", main_menu_kb(), add_main_menu=False)


@router.callback_query(F.data == "add_relapse")
async def add_relapse_from_menu(callback: CallbackQuery, session_factory: async_sessionmaker[AsyncSession]) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Ü–∏–¥–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await callback.answer()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from app.transport.handlers.group import add_relapse_callback
    await add_relapse_callback(callback, session_factory)


def rating_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="ü•á –¢–û–ü-10", callback_data="rating:top10")],
            [InlineKeyboardButton(text="üèÖ –¢–û–ü-50", callback_data="rating:top50")],
            [InlineKeyboardButton(text="üéñÔ∏è –¢–û–ü-100", callback_data="rating:top100")],
            [InlineKeyboardButton(text="üìä –í—Å—è —Ç–∞–±–ª–∏—Ü–∞", callback_data="rating:all")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help:show")],
        ]
    )


@router.callback_query(F.data == "rating:menu")
async def show_rating_menu(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    await update_message_with_menu(callback, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞:", rating_menu_kb(), add_main_menu=False)


@router.callback_query(F.data.startswith("rating:top"))
async def show_top_rating(callback: CallbackQuery, session_factory: async_sessionmaker[AsyncSession]) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¢–û–ü —Ä–µ–π—Ç–∏–Ω–≥"""
    await callback.answer()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from app.transport.handlers.group import build_top_text
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç –ø–æ —Ç–∏–ø—É —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating_type = callback.data.split(":")[-1]
    if rating_type == "top10":
        limit = 10
        title = "–¢–û–ü-10"
    elif rating_type == "top50":
        limit = 50
        title = "–¢–û–ü-50"
    elif rating_type == "top100":
        limit = 100
        title = "–¢–û–ü-100"
    else:
        limit = 10
        title = "–¢–û–ü-10"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
    text = await build_top_text(session_factory, limit)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥–∞
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ú–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥–∞", callback_data="rating:menu")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help:show")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")],
        ]
    )
    
    await update_message_with_menu(callback, f"{title}:\n\n{text}", kb, add_main_menu=False)


@router.callback_query(F.data == "rating:all")
async def show_all_rating(callback: CallbackQuery, session_factory: async_sessionmaker[AsyncSession]) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å—é —Ç–∞–±–ª–∏—Ü—É —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    await callback.answer()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from app.transport.handlers.group import build_top_text
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ä–µ–π—Ç–∏–Ω–≥ (–±–µ–∑ –ª–∏–º–∏—Ç–∞)
    text = await build_top_text(session_factory, limit=None)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥–∞
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ú–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥–∞", callback_data="rating:menu")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help:show")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")],
        ]
    )
    
    await update_message_with_menu(callback, f"–í—Å—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:\n\n{text}", kb, add_main_menu=False)


@router.my_chat_member()
async def on_bot_status_change(event: ChatMemberUpdated, session_factory: async_sessionmaker[AsyncSession]) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Å—Ç–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞ (–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª—Å—è)
    # –ò —á—Ç–æ —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∏–Ω—É—Ç)
    if (event.new_chat_member.status in ["member", "administrator"] and 
        event.date.timestamp() > asyncio.get_event_loop().time() - 300):  # 5 –º–∏–Ω—É—Ç
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
        async with session_factory() as session:
            from app.db.repo import UserRepo
            users = UserRepo(session)
            registered_users = await users.list_all_members()
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
            semaphore = asyncio.Semaphore(5)  # –ú–∞–∫—Å–∏–º—É–º 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
            
            async def send_menu_to_user(user_id: int):
                async with semaphore:
                    try:
                        await event.bot.send_message(
                            chat_id=user_id,
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω)",
                            reply_markup=main_menu_kb()
                        )
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                        await asyncio.sleep(0.1)
                    except (aiohttp.ClientError, asyncio.TimeoutError) as e:
                        logger.warning(f"Network issue sending menu to user {user_id}: {e}")
                    except ValueError as e:
                        logger.info(f"Validation error sending menu to user {user_id}: {e}")
                    except Exception as e:
                        # –û—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±—â–∏–π –ø–µ—Ä–µ—Ö–≤–∞—Ç, –Ω–æ –±–µ–∑ —Å–ø–∞–º–∞
                        if "bot was blocked" in str(e).lower() or "user is deactivated" in str(e).lower():
                            logger.debug(f"User {user_id} blocked bot or is deactivated")
                        elif "chat not found" in str(e).lower():
                            logger.debug(f"Chat not found for user {user_id}")
                        else:
                            logger.warning(f"Failed to send menu to user {user_id}: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            tasks = [send_menu_to_user(user.user_id) for user in registered_users]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            if tasks:
                logger.info(f"Sending menu to {len(tasks)} users after bot restart")
                await asyncio.gather(*tasks, return_exceptions=True)

# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥—É–ª—è
logger.info("Start handlers module loaded successfully")
logger.info("Registered handlers:")
logger.info("- on_start: CommandStart()")
logger.info("- show_menu_command: Command('menu')")
logger.info("- show_help: Command('help')")
logger.info("- handle_any_message: ~F.text.regexp patterns (excluding dates and prices)")
logger.info("- show_help_callback: help:show")
logger.info("- return_to_main_menu: menu:main")
logger.info("- add_relapse_from_menu: add_relapse")
logger.info("- show_rating_menu: rating:menu")
logger.info("- show_top_rating: rating:top*")
logger.info("- show_all_rating: rating:all")
logger.info("- on_bot_status_change: my_chat_member")
    







    
