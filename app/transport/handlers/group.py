from __future__ import annotations

import structlog
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from app.db.repo import MetricsRepo, TopPostRepo
from app.db.session import AsyncSession, async_sessionmaker
from app.transport.handlers.menu_utils import update_message_with_menu

router = Router()


async def build_top_text(session_factory: async_sessionmaker[AsyncSession], limit: int | None = 10) -> str:
    async with session_factory() as session:
        repo = MetricsRepo(session)
        top = await repo.get_top(limit=limit)

    if not top:
        return "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ."

    lines = []
    medals = ["ü•á", "ü•à", "ü•â"]
    for idx, (user, metrics) in enumerate(top, start=1):
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∞–ª—å–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –º–µ—Å—Ç
        if idx <= 3:
            prefix = medals[idx - 1]
        else:
            prefix = f"{idx}."
        
        name = user.full_name or user.username or str(user.user_id)
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        score = metrics.days - (metrics.relapses * 3)
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–∏–¥–∏–≤–∞—Ö –∏ —Ä–µ–π—Ç–∏–Ω–≥–µ
        relapse_text = f" (—Ä–µ—Ü–∏–¥–∏–≤–æ–≤: {metrics.relapses}, —Ä–µ–π—Ç–∏–Ω–≥: {score})" if metrics.relapses > 0 else f" (—Ä–µ–π—Ç–∏–Ω–≥: {score})"
        lines.append(f"{prefix} {name} ‚Äî {metrics.days} –¥–Ω.{relapse_text}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–∏–º–∏—Ç–∞
    if limit is None:
        header = "–í—Å—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:"
    elif limit == 10:
        header = "–¢–û–ü-10:"
    elif limit == 50:
        header = "–¢–û–ü-50:"
    elif limit == 100:
        header = "–¢–û–ü-100:"
    else:
        header = f"–¢–û–ü-{limit}:"
    
    return f"{header}\n" + "\n".join(lines)


@router.callback_query(lambda c: c.data == "add_relapse")
async def add_relapse_callback(callback: CallbackQuery, session_factory: async_sessionmaker[AsyncSession]) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Ü–∏–¥–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    log = structlog.get_logger()
    bot = callback.bot
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback
    user_id = callback.from_user.id
    
    async with session_factory() as session:
        metrics_repo = MetricsRepo(session)
        try:
            metrics = await metrics_repo.add_relapse(user_id)
            relapse_count = metrics.relapses
            
            if relapse_count <= 3:
                text = f"–†–µ—Ü–∏–¥–∏–≤ –¥–æ–±–∞–≤–ª–µ–Ω. –£ –≤–∞—Å {relapse_count} —Ä–µ—Ü–∏–¥–∏–≤–æ–≤. –°—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π –Ω–µ —Å–±—Ä–æ—à–µ–Ω."
            else:
                text = f"–†–µ—Ü–∏–¥–∏–≤ –¥–æ–±–∞–≤–ª–µ–Ω. –£ –≤–∞—Å {relapse_count} —Ä–µ—Ü–∏–¥–∏–≤–æ–≤. –°—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π —Å–±—Ä–æ—à–µ–Ω."
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from app.transport.handlers.menu_utils import update_message_with_menu
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help:show")],
                ]
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º update_message_with_menu –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            await update_message_with_menu(callback, text, kb, add_main_menu=True)
            
            await session.commit()
            log.info("relapse_added", user_id=user_id, relapse_count=relapse_count)
            
        except Exception as e:
            log.error("relapse_add_failed", user_id=user_id, error=str(e))
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from app.transport.handlers.menu_utils import update_message_with_menu
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help:show")],
                ]
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º update_message_with_menu –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            await update_message_with_menu(callback, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ü–∏–¥–∏–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", kb, add_main_menu=True)


@router.callback_query(F.data == "top:show")
async def show_top_in_private(callback: CallbackQuery, session_factory: async_sessionmaker[AsyncSession]) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¢–û–ü-10 –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"""
    await callback.answer()
    
    text = await build_top_text(session_factory, limit=10)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help:show")],
        ]
    )
    
    await update_message_with_menu(callback, text, kb, add_main_menu=True)


@router.message(Command("top_members"))
async def top_members(message: Message, session_factory: async_sessionmaker[AsyncSession]) -> None:
    log = structlog.get_logger()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    if message.chat.type == "private":
        log.info("top_members_command_in_private", user_id=message.from_user.id)
        return
    
    bot = message.bot
    text = await build_top_text(session_factory, limit=10)

    # –í –æ–±—â–µ–º —á–∞—Ç–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ - —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫
    kb = InlineKeyboardMarkup(inline_keyboard=[])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    topic_id = message.message_thread_id
    params = {}
    if topic_id is not None:
        params["message_thread_id"] = topic_id

    # –£–¥–∞–ª–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Å—Ç –¢–û–ü–∞, –µ—Å–ª–∏ –±—ã–ª –≤ —Ç–æ–º –∂–µ —Ç–æ–ø–∏–∫–µ
    async with session_factory() as session:
        top_repo = TopPostRepo(session)
        prev = await top_repo.get_for_chat(message.chat.id, topic_id)
        if prev is not None:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=prev.message_id)
            except Exception as e:  # noqa: BLE001
                log.warning("top_prev_delete_failed", error=str(e))

        sent = await bot.send_message(
            chat_id=message.chat.id,
            text=text,
            reply_markup=kb,
            **params,
        )

        await top_repo.set(message.chat.id, sent.message_id, topic_id)
        await session.commit()

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
    try:
        me = await bot.get_me()
        me_member = await bot.get_chat_member(message.chat.id, me.id)
        can_delete = getattr(getattr(me_member, "can_delete_messages", None), "__bool__", lambda: False)()
        log.info("bot_rights", can_delete_messages=bool(getattr(me_member, "can_delete_messages", False)))
    except Exception as e:  # noqa: BLE001
        log.warning("bot_rights_check_failed", error=str(e))

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ delete_messages)
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        me = await bot.get_me()
        me_member = await bot.get_chat_member(message.chat.id, me.id)
        can_delete = getattr(me_member, "can_delete_messages", False)
        
        if can_delete:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            log.info("Command message deleted successfully")
        else:
            log.info("Bot doesn't have permission to delete messages")
    except Exception as e:  # noqa: BLE001
        log.warning("top_command_delete_failed", error=str(e))
