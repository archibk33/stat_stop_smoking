from __future__ import annotations

from dataclasses import dataclass
from datetime import date, datetime
from typing import Optional


@dataclass(slots=True)
class MetricsResult:
    days: int
    saved_money: float


def calculate_metrics(quit_date: Optional[date], pack_price: Optional[float]) -> MetricsResult:
    if quit_date is None:
        return MetricsResult(days=0, saved_money=0.0)
    today = date.today()
    days = max((today - quit_date).days, 0)
    if pack_price is None:
        return MetricsResult(days=days, saved_money=0.0)
    # –£–ø—Ä–æ—â–µ–Ω–Ω–æ: 1 –ø–∞—á–∫–∞ –≤ –¥–µ–Ω—å
    saved_money = float(days) * float(pack_price)
    return MetricsResult(days=days, saved_money=saved_money)


def generate_admin_title(days: int) -> str:
    # 0‚Äì16 —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ —ç–º–æ–¥–∑–∏. –ö–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç.
    if days <= 0:
        return "0–¥"
    text = f"{days}–¥"
    return text[:16]


def rank_text(days: int) -> str:
    months = days / 30
    if months < 6:
        return "ü•â –ë—Ä–æ–Ω–∑–∞"
    if months < 12:
        return "ü•à –°–µ—Ä–µ–±—Ä–æ"
    if months < 24:
        return "ü•á –ó–æ–ª–æ—Ç–æ"
    return "üíé –ü–ª–∞—Ç–∏–Ω–∞"
